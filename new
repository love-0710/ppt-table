# Complete CSV Comparison Tool with HTML Report and Screenshot Proofs

import os
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from jinja2 import Environment, FileSystemLoader

# Setup paths
before_folder = "before"
after_folder = "after"
screenshot_dir = "screenshots"
template_folder = "templates"
os.makedirs(template_folder, exist_ok=True)
os.makedirs(screenshot_dir, exist_ok=True)

# Output data
match_report = []
mismatch_report = []
extra_rows_info = []
summary_stats = {"match": 0, "mismatch": 0}

# HTML template
with open(os.path.join(template_folder, "report_template.html"), "w") as f:
    f.write("""
<!DOCTYPE html>
<html>
<head>
    <title>CSV Comparison Report</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        h1, h2 { color: #333; }
        table { border-collapse: collapse; width: 100%; margin-bottom: 30px; }
        th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .pie-chart { max-width: 400px; margin-bottom: 30px; }
    </style>
</head>
<body>
    <h1>CSV Comparison Report</h1>
    <h2>Summary</h2>
    <p>Total Files Compared: {{ total }}</p>
    <p>Matched Files: {{ match }}</p>
    <p>Mismatched Files: {{ mismatch }}</p>

    <div class="pie-chart">
        <img src="pie_chart.png" alt="Pie Chart">
    </div>

    <h2>Matched Files</h2>
    <table>
        <tr><th>File Name</th><th>Status</th><th>Total Rows in BEFORE</th><th>Missing Rows in AFTER</th></tr>
        {% for row in matched %}
        <tr><td>{{ row[0] }}</td><td>{{ row[1] }}</td><td>{{ row[2] }}</td><td>{{ row[3] }}</td></tr>
        {% endfor %}
    </table>

    <h2>Mismatched Files</h2>
    <table>
        <tr><th>File Name</th><th>Row Number</th><th>Column Name</th><th>Mismatch Reason</th><th>Proof</th></tr>
        {% for row in mismatched %}
        <tr><td>{{ row[0] }}</td><td>{{ row[1] }}</td><td>{{ row[2] }}</td><td>{{ row[3] }}</td><td><img src="{{ row[4] }}" width="200"></td></tr>
        {% endfor %}
    </table>
</body>
</html>
""")

def normalize(val):
    if pd.isna(val): return "NaN"
    val = str(val).strip().replace(",", "").lstrip("0").replace("-", "/")
    if "/" in val:
        parts = val.split("/")
        parts = [str(int(p)) for p in parts if p.isdigit()]
        return "/".join(parts)
    return val

def create_comparison_screenshot(df_before, df_after, file_name):
    fig, axes = plt.subplots(ncols=2, figsize=(12, 4))
    canvas = FigureCanvas(fig)

    for ax, df, title in zip(axes, [df_before, df_after], ["Before", "After"]):
        ax.axis('tight')
        ax.axis('off')
        table = ax.table(cellText=df.values, colLabels=df.columns, loc='center', cellLoc='center')
        table.scale(1, 1.5)
        for i in range(len(df_before)):
            for j, col in enumerate(df.columns):
                v1 = normalize(df_before.iloc[i, j])
                v2 = normalize(df_after.iloc[i, j])
                if v1 != v2:
                    table[(i+1, j)].set_facecolor('red')
        ax.set_title(title)

    screenshot_path = os.path.join(screenshot_dir, f"{file_name}_diff.png")
    fig.tight_layout()
    fig.subplots_adjust(top=0.75)
    canvas.print_figure(screenshot_path, bbox_inches='tight')
    plt.close(fig)
    return screenshot_path

def compare_csv(file_name):
    global summary_stats
    path_before = os.path.join(before_folder, file_name)
    path_after = os.path.join(after_folder, file_name)

    try:
        df_before = pd.read_csv(path_before, dtype=str).fillna("NaN")
        df_after = pd.read_csv(path_after, dtype=str).fillna("NaN")
    except Exception as e:
        mismatch_report.append([file_name, "N/A", "N/A", f"Read error: {e}", ""])
        summary_stats["mismatch"] += 1
        return

    df_before.sort_values(by=list(df_before.columns), inplace=True, ignore_index=True)
    df_after.sort_values(by=list(df_after.columns), inplace=True, ignore_index=True)

    cols_before, cols_after = list(df_before.columns), list(df_after.columns)

    if cols_before != cols_after:
        extra_cols = set(cols_after) - set(cols_before)
        for col in extra_cols:
            mismatch_report.append([file_name, "N/A", col, "Extra column in AFTER", ""])
        summary_stats["mismatch"] += 1
        return

    has_mismatch = False
    screenshot_path = ""
    for idx in range(min(len(df_after), len(df_before))):
        for col in cols_before:
            val_before = normalize(df_before.iloc[idx][col])
            val_after = normalize(df_after.iloc[idx][col])
            if val_before != val_after:
                if not screenshot_path:
                    screenshot_path = create_comparison_screenshot(df_before, df_after, file_name)
                mismatch_report.append([file_name, idx, col, f"Mismatch | Before: {val_before} | After: {val_after}", screenshot_path])
                has_mismatch = True

    if len(df_after) > len(df_before):
        mismatch_report.append([file_name, "N/A", "N/A", "AFTER has more rows", ""])
        has_mismatch = True
    elif len(df_before) > len(df_after):
        extra_rows = list(range(len(df_after), len(df_before)))
        extra_rows_info.append(f"File: {file_name}\nExtra rows in BEFORE: {extra_rows}\n{'*'*40}\n")

    if has_mismatch:
        summary_stats["mismatch"] += 1
    else:
        match_report.append([file_name, "Match", len(df_before), "None"])
        summary_stats["match"] += 1

# Main execution
before_files = set(os.listdir(before_folder))
after_files = set(os.listdir(after_folder))
common_files = sorted(before_files.intersection(after_files))

for file in common_files:
    if file.endswith(".csv"):
        compare_csv(file)

# Save reports
pd.DataFrame(match_report, columns=["File Name", "Status", "Total Rows in BEFORE", "Missing Rows in AFTER"]).to_csv("match_report.csv", index=False)
pd.DataFrame(mismatch_report, columns=["File Name", "Row Number", "Column Name", "Mismatch Reason", "Proof"]).to_csv("mismatch_report.csv", index=False)
with open("extra_rows_in_before.txt", "w") as f:
    f.writelines(extra_rows_info)

# Pie chart
labels = ["Matched", "Mismatched"]
sizes = [summary_stats["match"], summary_stats["mismatch"]]
colors = ["green", "red"]
plt.figure(figsize=(4,4))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors)
plt.title("Comparison Summary")
plt.savefig("pie_chart.png")
plt.close()

# HTML report
env = Environment(loader=FileSystemLoader(template_folder))
template = env.get_template("report_template.html")
html_out = template.render(
    total=summary_stats["match"] + summary_stats["mismatch"],
    match=summary_stats["match"],
    mismatch=summary_stats["mismatch"],
    matched=match_report,
    mismatched=mismatch_report
)

with open("comparison_report.html", "w", encoding="utf-8") as f:
    f.write(html_out)

print("âœ… Reports generated:")
print("- match_report.csv")
print("- mismatch_report.csv")
print("- extra_rows_in_before.txt")
print("- pie_chart.png")
print("- comparison_report.html")
